{"version":3,"sources":["App.js","index.js"],"names":["CardForm","props","questionAreaRef","React","createRef","useState","newCard","setNewCard","answerAreaRef","className","onSubmit","event","preventDefault","question","current","value","answer","tempNewCard","unshift","likes","ref","required","placeholder","type","CardList","newCards","cards","setCards","cardsInit","setCardsInit","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","send","loadCards","map","card","index","Card","key","id","ActionButton","action","onClick","console","log","display","App","ReactDOM","render","document","getElementById"],"mappings":"kKAeA,SAASA,EAASC,GAChB,IAAMC,EAAkBC,IAAMC,YADP,EAEOC,mBAAS,IAFhB,mBAEhBC,EAFgB,KAEPC,EAFO,KAGjBC,EAAgBL,IAAMC,YAgB5B,OAAO,yBAAKK,UAAU,UACpB,0BAAMC,SAhBa,SAACC,GACpBA,EAAMC,iBACN,IAAMC,EAAWX,EAAgBY,QAAQC,MACnCC,EAASR,EAAcM,QAAQC,MACjCE,EAAW,YAAOX,GACtBW,EAAYC,QAAQ,CAClBL,SAAUA,EACVG,OAAQA,EACRG,MAAO,KAETZ,EAAWU,GACXf,EAAgBY,QAAQC,MAAQ,GAChCP,EAAcM,QAAQC,MAAQ,KAK5B,8BAAUK,IAAKlB,EAAiBmB,UAAU,EAAMZ,UAAU,oBAAoBa,YAAY,aAC1F,8BAAUF,IAAKZ,EAAea,UAAU,EAAMZ,UAAU,oBAAoBa,YAAY,WACxF,4BAAQC,KAAK,SAASd,UAAU,wBAAhC,WAEF,kBAACe,EAAD,CAAUC,SAAUnB,KAIxB,SAASkB,EAASvB,GAAQ,IAAD,EACGI,mBAAS,IADZ,mBAChBqB,EADgB,KACTC,EADS,OAEWtB,mBAAS,IAFpB,mBAEhBuB,EAFgB,KAELC,EAFK,KAgBvB,OAZAC,qBAAU,WACR,IAAIC,EAAQ,YAAI9B,EAAMwB,UAAUO,OAAOJ,GACnCG,EAAME,SAAWP,EAAMO,QACzBN,EAASI,KAEV,CAAC9B,EAAMwB,SAAUC,EAAOE,IAC3BE,qBAAU,YAnDZ,SAAmBI,GACjB,IAAMC,EAAM,IAAIC,eAGhBD,EAAIE,aAAe,OACnBF,EAAIG,KAHW,MACH,wCAGZH,EAAII,OAAS,WACXL,EAASC,EAAIK,SAAUL,EAAIM,SAE7BN,EAAIO,OA8CFC,EAHiB,SAACH,EAAUC,GAC1BZ,EAAaW,QAGd,IAED,6BACGd,EAAMkB,KAAI,SAACC,EAAMC,GAChB,OAAO,kBAACC,EAAD,CAAMF,KAAMA,EAAMG,IAAKH,EAAKI,SAM3C,SAASC,EAAajD,GAAQ,IACrB4C,EAA2B5C,EAA3B4C,KAAMM,EAAqBlD,EAArBkD,OAAQ1C,EAAaR,EAAbQ,UAOrB,OAAO,4BAAQA,UAAWA,EAAW2C,QANjB,SAACzC,GACnBA,EAAMC,iBACa,SAAhBuC,EAAO5B,MACR8B,QAAQC,IAAIT,EAAK1B,MAAMc,UAGiCY,EAAK1B,MAAMc,OAAhE,IAAyEkB,EAAOI,SAGzF,SAASR,EAAK9C,GAAQ,IACb4C,EAAQ5C,EAAR4C,KACP,OAAO,yBAAKpC,UAAU,2BACpB,wBAAIA,UAAU,QAAQoC,EAAKhC,UAC3B,2BAAIgC,EAAK7B,QACT,kBAACkC,EAAD,CAAcL,KAAMA,EAAMpC,UAAU,iCAAiC0C,OAAQ,CAAC5B,KAAM,OAAQgC,QAAS,YAW1FC,MAPf,SAAavD,GAEX,OAAO,kBAACD,EAAD,OCvFTyD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.9e1a1a81.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport data from './data';\n\nfunction loadCards(callback) {\n  const xhr = new XMLHttpRequest()\n  const method = \"GET\"\n  const url = \"http://localhost:8000/api/card/list/\"\n  xhr.responseType = \"json\"\n  xhr.open(method, url)\n  xhr.onload = function() {\n    callback(xhr.response, xhr.status)\n  }\n  xhr.send()\n}\n\nfunction CardForm(props) {\n  const questionAreaRef = React.createRef()\n  const [newCard, setNewCard] = useState([])\n  const answerAreaRef = React.createRef()\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const question = questionAreaRef.current.value\n    const answer = answerAreaRef.current.value\n    let tempNewCard = [...newCard]\n    tempNewCard.unshift({\n      question: question,\n      answer: answer,\n      likes: []\n    })\n    setNewCard(tempNewCard)\n    questionAreaRef.current.value = ''\n    answerAreaRef.current.value = ''\n    \n  }\n  return <div className='col-12'>\n    <form onSubmit={handleSubmit}>\n      <textarea ref={questionAreaRef} required={true} className='form-control my-2' placeholder='Question'></textarea>\n      <textarea ref={answerAreaRef} required={true} className='form-control my-2' placeholder='Answer'></textarea>\n      <button type='submit' className='btn btn-primary my-3'>Submit</button>\n    </form>\n    <CardList newCards={newCard}/>\n  </div>\n}\n\nfunction CardList(props) {\n  const [cards, setCards] = useState([])\n  const [cardsInit, setCardsInit] = useState([])\n\n  useEffect(() =>{\n    let final = [...props.newCards].concat(cardsInit)\n    if (final.length !== cards.length) {\n      setCards(final)\n    }\n  }, [props.newCards, cards, cardsInit])\n  useEffect(() => {\n    const callback = (response, status) => {\n      setCardsInit(response)\n    }\n    loadCards(callback)\n  }, [])\n  return (\n    <div>\n      {cards.map((card, index) => {\n        return <Card card={card} key={card.id} />\n      })}\n    </div>\n  )\n}\n\nfunction ActionButton(props) {\n  const {card, action, className} = props\n  const handleClick = (event) => {\n    event.preventDefault()\n    if(action.type === 'like') {\n      console.log(card.likes.length)\n    }\n  }\n  return <button className={className} onClick={handleClick}>{card.likes.length} {action.display}</button>\n}\n\nfunction Card(props) {\n  const {card} = props\n  return <div className=\"col-10 mx-auto col-md-6\">\n    <h3 className=\"mt-4\">{card.question}</h3>\n    <p>{card.answer}</p>\n    <ActionButton card={card} className=\"btn btn-group btn-primary mr-2\" action={{type: \"like\", display: \"Likes\"}} />\n  </div>\n}\n\nfunction App(props) {\n  \n  return <CardForm />\n  \n}\n\n\nexport default App\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById(\"root\"))"],"sourceRoot":""}